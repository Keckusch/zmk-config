/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    macros {
        switch: switch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "SWITCH";
        };
    };

    behaviors {
        hr_l_ctrl: hr_l_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_L_CTRL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 23 35 34 22 33 21 32 20 31 19 18 30 28 27 26 16 13>;
        };

        hr_l_win_alt_shift: hr_l_win_alt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_L_WIN_ALT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 23 35 34 22 33 21 32 20 31 19 18 30>;
        };

        hr_r_crtl: hr_r_crtl {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_R_CRTL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 28 27 26 16 13 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        hr_r_win_alt_shift: hr_r_win_alt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HR_R_WIN_ALT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        neo_level_l: neo_level_l {
            compatible = "zmk,behavior-hold-tap";
            label = "NEO_LEVEL_L";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };

        neo_level_r: neo_level_r {
            compatible = "zmk,behavior-hold-tap";
            label = "NEO_LEVEL_R";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        level_switch: level_switch {
            compatible = "zmk,behavior-hold-tap";
            label = "LEVEL_SWITCH";
            bindings = <&lt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };
    };

    combos {
        compatible = "zmk,combos";

        prefs {
            bindings = <&lt 4 LEFT_SHIFT>;
            key-positions = <37 36>;
        };

        del_word {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <37 40>;
        };

        prefs_r {
            bindings = <&lt 4 LEFT_SHIFT>;
            key-positions = <40 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB               &kp DE_Q           &kp DE_W           &kp DE_E                      &kp DE_R                             &kp DE_T     &kp DE_Z   &kp DE_U              &kp DE_I                &kp DE_O            &kp DE_P                   &kp DE_U_UMLAUT
&neo_level_l 1 DE_SZ  &mt LEFT_WIN DE_A  &mt LEFT_ALT DE_S  &hr_l_ctrl LEFT_CONTROL DE_D  &hr_l_win_alt_shift LEFT_SHIFT DE_F  &kp DE_G     &kp DE_H   &mt RIGHT_SHIFT DE_J  &mt RIGHT_CONTROL DE_K  &mt RIGHT_ALT DE_L  &mt RIGHT_WIN DE_O_UMLAUT  &neo_level_r 1 DE_U_UMLAUT
&kp LSHFT             &kp DE_Y           &kp DE_X           &kp DE_C                      &kp DE_V                             &kp DE_B     &kp DE_N   &kp DE_M              &kp DE_COMMA            &kp DE_DOT          &kp DE_MINUS               &kp RIGHT_SHIFT
                                                            &lt 5 LA(TAB)                 &lt 3 DELETE                         &kp ENTER    &kp SPACE  &lt 2 BACKSPACE       &lt 4 RIGHT_SHIFT
            >;
        };

        neo_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC         &kp DE_DEGREE     &kp DE_UNDERSCORE  &kp DE_LEFT_BRACKET  &kp DE_RIGHT_BRACKET  &kp DE_CARET         &kp DE_EXCLAMATION  &kp DE_LESS_THAN         &kp DE_GREATER_THAN       &kp DE_EQUAL         &kp DE_AMPERSAND  &kp DE_SZ
&kp DE_SECTION  &kp DE_BACKSLASH  &kp DE_SLASH       &kp DE_LEFT_BRACE    &kp DE_RIGHT_BRACE    &kp DE_ASTERISK      &kp DE_QUESTION     &kp DE_LEFT_PARENTHESIS  &kp DE_RIGHT_PARENTHESIS  &kp DE_MINUS         &kp DE_COLON      &kp DE_AT
&kp DE_EURO     &kp DE_HASH       &kp DE_DOLLAR      &kp DE_PIPE          &kp DE_TILDE          &kp DE_APOSTROPHE    &kp DE_PLUS         &kp DE_PERCENT           &kp DE_DOUBLE_QUOTES      &kp DE_SINGLE_QUOTE  &kp DE_SEMICOLON  &none
                                                     &none                &none                 &none                &none               &none                    &none
            >;
        };

        navigate {
            bindings = <
&kp ESC  &none     &kp PG_DN  &kp UP     &kp PG_UP  &none      &kp RC(DE_Z)  &kp RC(RS(DE_Z))  &none              &none          &none          &none
&none    &kp HOME  &kp LEFT   &kp DOWN   &kp RIGHT  &kp END    &none         &kp RIGHT_SHIFT   &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_WIN  &none
&none    &none     &kp LC(X)  &kp LC(C)  &kp LC(V)  &none      &none         &none             &none              &none          &none          &none
                              &none      &none      &none      &none         &none             &none
            >;
        };

        numpad {
            bindings = <
&none  &none  &none  &none  &none  &none    &kp DE_PLUS      &kp DE_N7  &kp DE_N8     &kp DE_N9  &kp DE_MINUS  &kp BACKSPACE
&none  &none  &none  &none  &none  &none    &kp DE_ASTERISK  &kp DE_N4  &kp DE_N5     &kp DE_N6  &kp DE_SLASH  &none
&none  &none  &none  &none  &none  &none    &none            &kp DE_N1  &kp DE_N2     &kp DE_N3  &kp DE_COMMA  &kp DE_DOT
                     &none  &none  &none    &kp ENTER        &kp DE_N0  &kp DE_COMMA
            >;
        };

        prefs {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&bt BT_CLR  &none         &none         &none         &none             &none           &none            &none                 &none          &none            &none              &none
&none       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4    &kp C_PREVIOUS   &kp C_PLAY_PAUSE      &kp C_NEXT     &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &none
&none       &none         &none         &none         &none             &none           &rgb_ug RGB_TOG  &kp C_BRIGHTNESS_INC  &kp C_BRI_DEC  &none            &none              &none
                                        &kp C_POWER   &kp C_SLEEP_MODE  &kp LG(DE_L)    &none            &none                 &none
            >;
        };

        f_keys {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6    &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&none   &trans  &trans  &trans  &trans  &none     &none   &kp F4  &kp F5  &kp F6   &none    &none
&none   &none   &none   &none   &none   &none     &none   &kp F1  &kp F2  &kp F3   &none    &none
                        &none   &none   &none     &none   &none   &none
            >;
        };
    };
};
